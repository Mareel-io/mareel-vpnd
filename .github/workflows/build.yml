# SPDX-FileCopyrightText: 2022 Empo Inc.
#
# SPDX-License-Identifier: CC0-1.0

name: build
on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.targets[0] }}
    strategy:
      matrix:
        targets:
          - [ubuntu-latest, [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]]
          - [windows-latest, [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]]
          - [macos-latest, [x86_64-apple-darwin, aarch64-apple-darwin]]
        clang: [["13.0", "clang_13_0"]]
    env:
      RUSTFLAGS: "-C target-feature=-crt-static"
    steps:
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.targets[1][1] }}
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true
      - name:  Install libraries
        run:   |
               if [ "$RUNNER_OS" == "Linux" ]; then
                    sudo ./ci/ubuntu-multiarch.sh
                    sudo dpkg --add-architecture arm64
                    sudo sed -i 's/^deb/deb [arch=i386,amd64]/' /etc/apt/sources.list
                    # Bust cache
                    sudo rm -rf /var/lib/apt/lists/*
                    sudo apt update
                    sudo apt --fix-broken install -y
                    sudo apt --fix-broken install -y pkg-config libdbus-1-3 libdbus-1-dev libsystemd-dev libssl-dev
                    sudo apt --fix-broken install -y libdbus-1-3:arm64 libdbus-1-dev:arm64 libsystemd-dev:arm64 libssl-dev:arm64
                    sudo apt --fix-broken install -y gcc-aarch64-linux-gnu libgcc-10-dev:arm64
               else
                    echo "This platform does not require libdbus."
               fi
        shell: bash
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ matrix.clang[0] }}
          directory: ${{ runner.temp }}/llvm-${{ matrix.clang[0] }}
      - uses: Swatinem/rust-cache@v1
      - name: Unzip
        run:   |
               unzip windll.zip
        shell: bash
      - name: Build
        run:   |
               if [ "$RUNNER_OS" == "Linux" ]; then
                    export CROSS_GCCLIB=$(ls -d /usr/lib/gcc-cross/aarch64-linux-gnu/* | sort | head -n 1)
                    export RUSTFLAGS='-C target-feature=-crt-static'
                    cargo build --release --target ${{ matrix.targets[1][0] }} --features dbus
                    export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
                    export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
                    export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
                    export BINDGEN_EXTRA_CLANG_ARGS_aarch64_unknown_linux_gnu="--sysroot=/usr/aarch64-linux-gnu"
                    export PKG_CONFIG_PATH="/usr/lib/aarch64-linux-gnu/pkgconfig/:${PKG_CONFIG_PATH}"
                    export RUSTFLAGS="-C target-cpu=neoverse-n1 -C target-feature=-crt-static"
                    cargo build --release --target ${{ matrix.targets[1][1] }} --features dbus
               elif [ "$RUNNER_OS" == "Windows" ]; then
                    rm -f ./netlink-request
                    rm -f ./wireguard-control
                    cp -rv ./innernet/netlink-request ./
                    cp -rv ./innernet/wireguard-control ./
                    export RUSTFLAGS='-C target-feature=+crt-static'
                    cargo build --release --target ${{ matrix.targets[1][0] }} --bin mareel-vpnd --bin vpnd-configgen
                    # Ths requires arm64 edition of windns
                    #cargo build --release --target ${{ matrix.targets[1][1] }} --bin mareel-vpnd --bin vpnd-configgen
               else
                    export RUSTFLAGS='-C target-feature=+crt-static'
                    cargo build --release --target ${{ matrix.targets[1][0] }}
                    cargo build --release --target ${{ matrix.targets[1][1] }}
               fi
        shell: bash
      - name: Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.targets[0] }}
          path: |
            target/**/release/mareel-vpnd
            target/**/release/mareel-vpnd.exe
            target/**/release/vpnd-configgen
            target/**/release/vpnd-configgen.exe
